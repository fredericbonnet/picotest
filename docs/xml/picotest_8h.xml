<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="picotest_8h" kind="file" language="C++">
    <compoundname>picotest.h</compoundname>
    <includes local="no">setjmp.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="16">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>setjmp.h</label>
      </node>
      <node id="14">
        <label>include/picotest.h</label>
        <link refid="picotest_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>Version</header>
      <description><para>PicoTest follows the Semantic Versioning Specification (SemVer) 2.0.0:</para>
<para><ulink url="https://semver.org/spec/v2.0.0.html">https://semver.org/spec/v2.0.0.html</ulink> </para>
</description>
      <memberdef kind="define" id="group__public__interface_1ga1402f3301dff3f468aac77622f877f2d" prot="public" static="no">
        <name>PICOTEST_VERSION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="78" column="9" bodyfile="include/picotest.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__public__interface_1ga9ea29549254cbe44f25ef974d0458e57" prot="public" static="no">
        <name>PICOTEST_VERSION_MAJOR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="79" column="9" bodyfile="include/picotest.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__public__interface_1ga6488c76f8a06a1a8222c2309b170bd1d" prot="public" static="no">
        <name>PICOTEST_VERSION_MINOR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="80" column="9" bodyfile="include/picotest.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__public__interface_1gafc9d1ab6d8cced95f3560c3a006d8005" prot="public" static="no">
        <name>PICOTEST_VERSION_PATCH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="81" column="9" bodyfile="include/picotest.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Test Functions</header>
      <memberdef kind="typedef" id="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" prot="public" static="no">
        <type>int()</type>
        <definition>typedef int() PicoTestProc(const char *cond)</definition>
        <argsstring>(const char *cond)</argsstring>
        <name>PicoTestProc</name>
        <briefdescription>
<para>Signature of test functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Both <ref refid="group__test__suites" kindref="compound">Test Suites</ref> and <ref refid="group__test__cases" kindref="compound">Test Cases</ref> follow this signature.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>Test filtering condition, or <bold>NULL</bold>. In the former case, passed to the active test filter before running the test.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of failed tests.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1ga7a9c873e5e377bd88fcc4849689c1e6f" kindref="member">PICOTEST_SUITE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1ga47f93260349371f63f95900166cf7858" kindref="member">PICOTEST_FILTER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="105" column="1" bodyfile="include/picotest.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Test Filters</header>
      <description><para>PicoTest provides a way for client code to select tests to be run using custom filter functions. </para>
</description>
      <memberdef kind="define" id="group__public__interface_1ga47f93260349371f63f95900166cf7858" prot="public" static="no">
        <name>PICOTEST_FILTER</name>
        <param><defname>_test</defname></param>
        <param><defname>_testName</defname></param>
        <param><defname>_cond</defname></param>
        <briefdescription>
<para>Define the test filter function. </para>
        </briefdescription>
        <detaileddescription>
<para>Called before calling a test with a non- <bold>NULL</bold> condition.</para>
<para>The default filter does a simple string equality test between its <bold>testName</bold> and <bold>cond</bold> arguments, and propagates to subtests if it doesn&apos;t match. Redefine this macro to use a custom filter function, which must follow the <ref refid="group__public__interface_1gafc743c5aa3870900472bc701b3ad35a4" kindref="member">PicoTestFilterProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="filter.c"><codeline><highlight class="comment">/*<sp/>Custom<sp/>test<sp/>filter<sp/>declaration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__public__interface_1gafc743c5aa3870900472bc701b3ad35a4" kindref="member">PicoTestFilterProc</ref><sp/>matchSubstring;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FILTER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FILTER<sp/>matchSubstring</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>filter<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__public__interface_1gaf5acf1a68605f6c8b758bae0224e03fc" kindref="member">PicoTestFilterResult</ref><sp/>matchSubstring(<ref refid="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" kindref="member">PicoTestProc</ref><sp/>*test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cond)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Match<sp/>tests<sp/>containing<sp/>**cond**<sp/>substring.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(strstr(testName,<sp/>cond)<sp/>==<sp/>NULL<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca487de7ecca4099ee737bd41a8d75ba75" kindref="member">PICOTEST_FILTER_SKIP_PROPAGATE</ref><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fcaf2aa19fa3a0a1bc56585df626aa8e188" kindref="member">PICOTEST_FILTER_PASS_PROPAGATE</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="filter_8c" kindref="compound">filter.c</ref> Example of PicoTest test filter, allows custom filtering of test functions. <linebreak/>
 <ref refid="tags_8c" kindref="compound">tags.c</ref> Advanced example of PicoTest test filter, implements a primitive tagging feature for test filtering. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1gafc743c5aa3870900472bc701b3ad35a4" kindref="member">PicoTestFilterProc</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="193" column="9" bodyfile="include/picotest.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="enum" id="group__public__interface_1gaf5acf1a68605f6c8b758bae0224e03fc" prot="public" static="no" strong="no">
        <type></type>
        <name>PicoTestFilterResult</name>
        <enumvalue id="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca0ee37a1cf8a2347fb3c42636dfb80b1c" prot="public">
          <name>PICOTEST_FILTER_SKIP</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Test does not match the condition, skip this test and all its subtests. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca35508816a12c32e7ce536786e5ffc8d9" prot="public">
          <name>PICOTEST_FILTER_PASS</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Test matches the condition, run this test and all its subtests. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca487de7ecca4099ee737bd41a8d75ba75" prot="public">
          <name>PICOTEST_FILTER_SKIP_PROPAGATE</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Test does not match the condition, skip this test but filter its subtests. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fcaf2aa19fa3a0a1bc56585df626aa8e188" prot="public">
          <name>PICOTEST_FILTER_PASS_PROPAGATE</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Test matches the condition, run this test but filter its subtests. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Result of test filter functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para><ref refid="filter_8c" kindref="compound">filter.c</ref> Example of PicoTest test filter, allows custom filtering of test functions. <linebreak/>
 <ref refid="tags_8c" kindref="compound">tags.c</ref> Advanced example of PicoTest test filter, implements a primitive tagging feature for test filtering. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1gafc743c5aa3870900472bc701b3ad35a4" kindref="member">PicoTestFilterProc</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="127" column="1" bodyfile="include/picotest.h" bodystart="127" bodyend="141"/>
      </memberdef>
      <memberdef kind="typedef" id="group__public__interface_1gafc743c5aa3870900472bc701b3ad35a4" prot="public" static="no">
        <type><ref refid="group__public__interface_1gaf5acf1a68605f6c8b758bae0224e03fc" kindref="member">PicoTestFilterResult</ref>()</type>
        <definition>typedef PicoTestFilterResult() PicoTestFilterProc(PicoTestProc *test, const char *testName, const char *cond)</definition>
        <argsstring>(PicoTestProc *test, const char *testName, const char *cond)</argsstring>
        <name>PicoTestFilterProc</name>
        <briefdescription>
<para>Signature of test filter functions. </para>
        </briefdescription>
        <detaileddescription>
<para>A test called with a non- <bold>NULL</bold> condition must match this condition to be run. The test filter is set using the <ref refid="group__public__interface_1ga47f93260349371f63f95900166cf7858" kindref="member">PICOTEST_FILTER</ref> macro.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>test</parametername>
</parameternamelist>
<parameterdescription>
<para>Test function to filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of test to filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>Test filtering condition.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="group__public__interface_1gaf5acf1a68605f6c8b758bae0224e03fc" kindref="member">PicoTestFilterResult</ref> value</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="filter.c"><codeline><highlight class="comment">/*<sp/>Custom<sp/>test<sp/>filter<sp/>declaration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__public__interface_1gafc743c5aa3870900472bc701b3ad35a4" kindref="member">PicoTestFilterProc</ref><sp/>matchSubstring;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FILTER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FILTER<sp/>matchSubstring</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>filter<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__public__interface_1gaf5acf1a68605f6c8b758bae0224e03fc" kindref="member">PicoTestFilterResult</ref><sp/>matchSubstring(<ref refid="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" kindref="member">PicoTestProc</ref><sp/>*test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cond)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Match<sp/>tests<sp/>containing<sp/>**cond**<sp/>substring.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(strstr(testName,<sp/>cond)<sp/>==<sp/>NULL<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca487de7ecca4099ee737bd41a8d75ba75" kindref="member">PICOTEST_FILTER_SKIP_PROPAGATE</ref><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fcaf2aa19fa3a0a1bc56585df626aa8e188" kindref="member">PICOTEST_FILTER_PASS_PROPAGATE</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="filter_8c" kindref="compound">filter.c</ref> Example of PicoTest test filter, allows custom filtering of test functions. <linebreak/>
 <ref refid="tags_8c" kindref="compound">tags.c</ref> Advanced example of PicoTest test filter, implements a primitive tagging feature for test filtering. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1ga7a9c873e5e377bd88fcc4849689c1e6f" kindref="member">PICOTEST_SUITE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1ga47f93260349371f63f95900166cf7858" kindref="member">PICOTEST_FILTER</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1gaf5acf1a68605f6c8b758bae0224e03fc" kindref="member">PicoTestFilterResult</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="167" column="1" bodyfile="include/picotest.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Test hierarchy traversal</header>
      <description><para>Tests can form hierarchies of test suites and test cases. PicoTest provides a way to traverse such hierarchies with a simple visitor pattern. This can be used for e.g. test list discovery in build systems. </para>
</description>
      <memberdef kind="define" id="group__public__interface_1gaee8202c2543c7fb59fa08aec75b6cc63" prot="public" static="no">
        <name>PICOTEST_TRAVERSE</name>
        <param><defname>_testName</defname></param>
        <param><defname>_proc</defname></param>
        <briefdescription>
<para>Traverse a test hierarchy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the traversed test. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Test traversal proc. Must follow the <ref refid="group__public__interface_1ga0b6b1fbb66a2062b823d28026399d27b" kindref="member">PicoTestTraverseProc</ref> signature.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para><ref refid="traverse_8c" kindref="compound">traverse.c</ref> Example of PicoTest hierarchy traversal, prints traversed tests to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1ga0b6b1fbb66a2062b823d28026399d27b" kindref="member">PicoTestTraverseProc</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="237" column="9" bodyfile="include/picotest.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__public__interface_1ga0b6b1fbb66a2062b823d28026399d27b" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestTraverseProc(const char *name, int nb)</definition>
        <argsstring>(const char *name, int nb)</argsstring>
        <name>PicoTestTraverseProc</name>
        <briefdescription>
<para>Function signature of test traversal proc. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of traversed test. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of subtests (zero for simple test cases, at least one for test suites).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="traverse.c"><codeline><highlight class="comment">/*<sp/>Test<sp/>traversal<sp/>function<sp/>declaration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__public__interface_1ga0b6b1fbb66a2062b823d28026399d27b" kindref="member">PicoTestTraverseProc</ref><sp/>printTestCase;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__public__interface_1ga0b6b1fbb66a2062b823d28026399d27b" kindref="member">PicoTestTraverseProc</ref><sp/>printTestName;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Traversal<sp/>function,<sp/>will<sp/>print<sp/>test<sp/>cases<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>==<sp/>0)<sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Traversal<sp/>function,<sp/>will<sp/>print<sp/>all<sp/>tests.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printTestName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="traverse_8c" kindref="compound">traverse.c</ref> Example of PicoTest hierarchy traversal, prints traversed tests to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1gaee8202c2543c7fb59fa08aec75b6cc63" kindref="member">PICOTEST_TRAVERSE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="223" column="1" bodyfile="include/picotest.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Logging</header>
      <description><para>PicoTest provides a way for client code to intercept test failure events. This can be used for e.g. logging purpose or reporting. </para>
</description>
      <memberdef kind="define" id="group__public__interface_1gae4b2f943bef59bd05fb7a328a6c39d48" prot="public" static="no">
        <name>PICOTEST_FAILURE_LOGGER</name>
        <briefdescription>
<para>Define the test failure log handler. </para>
        </briefdescription>
        <detaileddescription>
<para>Called when a test fails.</para>
<para>The default handler does nothing. Redefine this macro to use a custom handler, which must follow the <ref refid="group__public__interface_1ga407922fa95d91c28651b93fbafe1d1bb" kindref="member">PicoTestFailureLoggerProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="logger.c"><codeline><highlight class="comment">/*<sp/>Test<sp/>failure<sp/>logger<sp/>declaration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__public__interface_1ga407922fa95d91c28651b93fbafe1d1bb" kindref="member">PicoTestFailureLoggerProc</ref><sp/>logFailure;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FAILURE_LOGGER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FAILURE_LOGGER<sp/>logFailure</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>failure<sp/>logger<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>va_list<sp/>args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[%s]<sp/>&quot;</highlight><highlight class="normal">,<sp/>type);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Location<sp/>in<sp/>source<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s(%d)<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>file,<sp/>line);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Failed<sp/>expression.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>test);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Optional<sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vprintf(msg,<sp/>args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="logger_8c" kindref="compound">logger.c</ref> Example of PicoTest error logging, prints location and info of failed assertions to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1ga407922fa95d91c28651b93fbafe1d1bb" kindref="member">PicoTestFailureLoggerProc</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="301" column="9" bodyfile="include/picotest.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__public__interface_1ga407922fa95d91c28651b93fbafe1d1bb" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestFailureLoggerProc(const char *file, int line, const char *type, const char *test, const char *msg, va_list args)</definition>
        <argsstring>(const char *file, int line, const char *type, const char *test, const char *msg, va_list args)</argsstring>
        <name>PicoTestFailureLoggerProc</name>
        <briefdescription>
<para>Function signature of test failure log handlers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>File name where the test was defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of test in file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of test that failed (e.g. <computeroutput>&quot;ASSERT&quot;</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test</parametername>
</parameternamelist>
<parameterdescription>
<para>Tested expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message format string, or <bold>NULL</bold>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message string parameter list, or <bold>NULL</bold>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><bold>msg</bold> and <bold>args</bold> are suitable arguments to <bold>vprintf()</bold>.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="logger.c"><codeline><highlight class="comment">/*<sp/>Test<sp/>failure<sp/>logger<sp/>declaration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__public__interface_1ga407922fa95d91c28651b93fbafe1d1bb" kindref="member">PicoTestFailureLoggerProc</ref><sp/>logFailure;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FAILURE_LOGGER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FAILURE_LOGGER<sp/>logFailure</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>failure<sp/>logger<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>va_list<sp/>args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[%s]<sp/>&quot;</highlight><highlight class="normal">,<sp/>type);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Location<sp/>in<sp/>source<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s(%d)<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>file,<sp/>line);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Failed<sp/>expression.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>test);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Optional<sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vprintf(msg,<sp/>args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="logger_8c" kindref="compound">logger.c</ref> Example of PicoTest error logging, prints location and info of failed assertions to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1gae4b2f943bef59bd05fb7a328a6c39d48" kindref="member">PICOTEST_FAILURE_LOGGER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="271" column="1" bodyfile="include/picotest.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__public__interface_1gaeef4d6736aa1095a8272a00d003bfe22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_logFailure</definition>
        <argsstring>(const char *file, int line, const char *type, const char *test, const char *msg, va_list args)</argsstring>
        <name>picoTest_logFailure</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>test</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="280" column="1" bodyfile="include/picotest.h" bodystart="280" bodyend="281"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Test Case Definitions</header>
      <memberdef kind="define" id="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" prot="public" static="no">
        <name>PICOTEST_CASE</name>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Test case declaration. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro defines a <ref refid="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" kindref="member">PicoTestProc</ref> of the given name that can be called directly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the test case. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_fixtureName</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Name of the test fixture used by the test. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_context</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Fixture context structure defined using <ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT(_fixtureName)</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of failed tests.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="mainSuite.inc"><codeline><highlight class="preprocessor">#define<sp/>FAILS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PASSES<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Simple<sp/>test<sp/>with<sp/>no<sp/>fixture<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref>(testCase1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gacd07b017f38d1e3ad784f369345357a2" kindref="member">PICOTEST_VERIFY</ref>(FAILS);<sp/></highlight><highlight class="comment">/*<sp/>Logs<sp/>error<sp/>and<sp/>continue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref>(FAILS);<sp/></highlight><highlight class="comment">/*<sp/>Logs<sp/>error<sp/>and<sp/>abort<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unreached<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref>(PASSES);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>with<sp/>fixture<sp/>but<sp/>no<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref>(testCase2,<sp/>simpleFixture)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref>(staticVar<sp/>==<sp/>1);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gacd07b017f38d1e3ad784f369345357a2" kindref="member">PICOTEST_VERIFY</ref>(FAILS);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Logs<sp/>error<sp/>and<sp/>continue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>with<sp/>fixture<sp/>and<sp/>context.<sp/>Tests<sp/>belonging<sp/>to<sp/>the<sp/>same<sp/>suite<sp/>don&apos;t<sp/>have</highlight></codeline>
<codeline><highlight class="comment"><sp/>*<sp/>to<sp/>share<sp/>the<sp/>same<sp/>suite.<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref>(testCase3,<sp/>fixtureWithContext,<sp/>context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref>(staticVar<sp/>==<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref>(context-&gt;var1<sp/>==<sp/>1);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gacd07b017f38d1e3ad784f369345357a2" kindref="member">PICOTEST_VERIFY</ref>(context-&gt;var2<sp/>==<sp/>NULL);<sp/></highlight><highlight class="comment">/*<sp/>Logs<sp/>error<sp/>and<sp/>continue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref>(context-&gt;var3<sp/>==<sp/>NULL);<sp/></highlight><highlight class="comment">/*<sp/>Logs<sp/>error<sp/>and<sp/>abort<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="comment">/*<sp/>Another<sp/>test<sp/>using<sp/>**simpleFixture**.<sp/>Tests<sp/>need<sp/>not<sp/>belong<sp/>to<sp/>the<sp/>same<sp/>suite</highlight></codeline>
<codeline><highlight class="comment"><sp/>*<sp/>to<sp/>share<sp/>a<sp/>fixture.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref>(testCase4,<sp/>simpleFixture)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gacd07b017f38d1e3ad784f369345357a2" kindref="member">PICOTEST_VERIFY</ref>(staticVar<sp/>==<sp/>1);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref>(PASSES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>test<sp/>uses<sp/>a<sp/>fixture<sp/>that<sp/>requires<sp/>a<sp/>context.<sp/>In<sp/>this<sp/>case<sp/>the<sp/>context</highlight></codeline>
<codeline><highlight class="comment"><sp/>*<sp/>passed<sp/>to<sp/>the<sp/>fixture<sp/>setup<sp/>and<sp/>teardown<sp/>functions<sp/>is<sp/>NULL.<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref>(testCase5,<sp/>fixtureWithOptionalContext)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gacd07b017f38d1e3ad784f369345357a2" kindref="member">PICOTEST_VERIFY</ref>(staticVar<sp/>==<sp/>3);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref>(PASSES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="main_suite_8inc" kindref="compound">mainSuite.inc</ref> Example of a simple PicoTest suite. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" kindref="member">PicoTestProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="345" column="13" bodyfile="include/picotest.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Test Case Hooks</header>
      <description><para>PicoTest provides a way for client code to intercept test case events. This can be used for e.g. logging purpose or reporting. </para>
</description>
      <memberdef kind="define" id="group__test__cases_1gad1f702ab6600b04f66731d35bf38fc67" prot="public" static="no">
        <name>PICOTEST_CASE_ENTER</name>
        <briefdescription>
<para>Define the test case enter hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__test__cases_1ga0af0a0ec6d2bbee706b56fea6f60126e" kindref="member">PicoTestCaseEnterProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__cases_1ga0af0a0ec6d2bbee706b56fea6f60126e" kindref="member">PicoTestCaseEnterProc</ref><sp/>enterTestCase;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_CASE_ENTER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_CASE_ENTER<sp/>enterTestCase</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enterTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;running<sp/>test<sp/>case<sp/>%s...\n&quot;</highlight><highlight class="normal">,<sp/>testName);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1ga0af0a0ec6d2bbee706b56fea6f60126e" kindref="member">PicoTestCaseEnterProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1ga4fd71dfed1ce3733b0d670c86b8d523a" kindref="member">PICOTEST_CASE_LEAVE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="481" column="9" bodyfile="include/picotest.h" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__test__cases_1ga4fd71dfed1ce3733b0d670c86b8d523a" prot="public" static="no">
        <name>PICOTEST_CASE_LEAVE</name>
        <briefdescription>
<para>Define the test case leave hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__test__cases_1gacce6ae69ea5064e39e3c56915978609e" kindref="member">PicoTestCaseLeaveProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__cases_1gacce6ae69ea5064e39e3c56915978609e" kindref="member">PicoTestCaseLeaveProc</ref><sp/>leaveTestCase;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_CASE_LEAVE</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_CASE_LEAVE<sp/>leaveTestCase</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>leaveTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(--level);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;test<sp/>case<sp/>%s<sp/>done<sp/>(%d<sp/>failures)\n&quot;</highlight><highlight class="normal">,<sp/>testName,<sp/>fail);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1gacce6ae69ea5064e39e3c56915978609e" kindref="member">PicoTestCaseLeaveProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1gad1f702ab6600b04f66731d35bf38fc67" kindref="member">PICOTEST_CASE_ENTER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="528" column="9" bodyfile="include/picotest.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__test__cases_1ga0af0a0ec6d2bbee706b56fea6f60126e" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestCaseEnterProc(const char *testName)</definition>
        <argsstring>(const char *testName)</argsstring>
        <name>PicoTestCaseEnterProc</name>
        <briefdescription>
<para>Function signature of test case enter hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called before running the test case.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test case name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__cases_1ga0af0a0ec6d2bbee706b56fea6f60126e" kindref="member">PicoTestCaseEnterProc</ref><sp/>enterTestCase;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_CASE_ENTER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_CASE_ENTER<sp/>enterTestCase</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enterTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;running<sp/>test<sp/>case<sp/>%s...\n&quot;</highlight><highlight class="normal">,<sp/>testName);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1gad1f702ab6600b04f66731d35bf38fc67" kindref="member">PICOTEST_CASE_ENTER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="452" column="1" bodyfile="include/picotest.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__test__cases_1gacce6ae69ea5064e39e3c56915978609e" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestCaseLeaveProc(const char *testName, int fail)</definition>
        <argsstring>(const char *testName, int fail)</argsstring>
        <name>PicoTestCaseLeaveProc</name>
        <briefdescription>
<para>Function signature of test case leave hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called after running the test case.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test case name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail</parametername>
</parameternamelist>
<parameterdescription>
<para>Failed tests (including its subtests if any).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__cases_1gacce6ae69ea5064e39e3c56915978609e" kindref="member">PicoTestCaseLeaveProc</ref><sp/>leaveTestCase;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_CASE_LEAVE</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_CASE_LEAVE<sp/>leaveTestCase</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>leaveTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(--level);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;test<sp/>case<sp/>%s<sp/>done<sp/>(%d<sp/>failures)\n&quot;</highlight><highlight class="normal">,<sp/>testName,<sp/>fail);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1ga4fd71dfed1ce3733b0d670c86b8d523a" kindref="member">PICOTEST_CASE_LEAVE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="499" column="1" bodyfile="include/picotest.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__test__cases_1gae45000329c7e66faad29a601a8f0e676" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_enterTestCase</definition>
        <argsstring>(const char *testName)</argsstring>
        <name>picoTest_enterTestCase</name>
        <param>
          <type>const char *</type>
          <declname>testName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="460" column="1" bodyfile="include/picotest.h" bodystart="460" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="group__test__cases_1ga35c4adadabea624fe844fa784f173281" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_leaveTestCase</definition>
        <argsstring>(const char *testName, int fail)</argsstring>
        <name>picoTest_leaveTestCase</name>
        <param>
          <type>const char *</type>
          <declname>testName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="507" column="1" bodyfile="include/picotest.h" bodystart="507" bodyend="507"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Assertion Definitions</header>
      <memberdef kind="define" id="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" prot="public" static="no">
        <name>PICOTEST_ASSERT</name>
        <param><defname>x</defname></param>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Hard assertion. </para>
        </briefdescription>
        <detaileddescription>
<para>Logs an error if the given value is false, then stops the test with <ref refid="group__assertions_1ga62031fa5f6f86e517565b77a1fa37f59" kindref="member">PICOTEST_ABORT()</ref>.</para>
<para><ref refid="group__public__interface_1gae4b2f943bef59bd05fb7a328a6c39d48" kindref="member">PICOTEST_FAILURE_LOGGER()</ref> is called with the <bold>type</bold> argument set to <computeroutput>&quot;ASSERT&quot;</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to test. Evaluated once, so it can be an expression with side effects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Message format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Message string arguments.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><bold>msg</bold> and following arguments arguments are suitable arguments to <bold>printf()</bold>.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="main_suite_8inc" kindref="compound">mainSuite.inc</ref> Example of a simple PicoTest suite. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1gae4b2f943bef59bd05fb7a328a6c39d48" kindref="member">PICOTEST_FAILURE_LOGGER</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__assertions_1ga62031fa5f6f86e517565b77a1fa37f59" kindref="member">PICOTEST_ABORT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__assertions_1gacd07b017f38d1e3ad784f369345357a2" kindref="member">PICOTEST_VERIFY</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="569" column="9" bodyfile="include/picotest.h" bodystart="569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__assertions_1gacd07b017f38d1e3ad784f369345357a2" prot="public" static="no">
        <name>PICOTEST_VERIFY</name>
        <param><defname>x</defname></param>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Soft assertion. </para>
        </briefdescription>
        <detaileddescription>
<para>Logs an error if the given value is false, but let the test continue.</para>
<para><ref refid="group__public__interface_1gae4b2f943bef59bd05fb7a328a6c39d48" kindref="member">PICOTEST_FAILURE_LOGGER()</ref> is called with the <bold>type</bold> argument set to <computeroutput>&quot;VERIFY&quot;</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to test. Evaluated once, so it can be an expression with side effects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Message format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Message string arguments.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><bold>msg</bold> and following arguments arguments are suitable arguments to <bold>printf()</bold>.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="main_suite_8inc" kindref="compound">mainSuite.inc</ref> Example of a simple PicoTest suite. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1gae4b2f943bef59bd05fb7a328a6c39d48" kindref="member">PICOTEST_FAILURE_LOGGER</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="604" column="9" bodyfile="include/picotest.h" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__assertions_1ga89a35f18021df570967bb707a8537f3b" prot="public" static="no">
        <name>PICOTEST_FAILURE</name>
        <param><defname>type</defname></param>
        <param><defname>test</defname></param>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Generic failure. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__public__interface_1gae4b2f943bef59bd05fb7a328a6c39d48" kindref="member">PICOTEST_FAILURE_LOGGER()</ref> is called with the provided <bold>type</bold>, <bold>test</bold> and <bold>msg</bold> arguments.</para>
<para>This can be used to implement custom testing logic.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of test that failed (e.g. &quot;ASSERT&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test</parametername>
</parameternamelist>
<parameterdescription>
<para>Failed test. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Message format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Message string arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="630" column="9" bodyfile="include/picotest.h" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__assertions_1ga62031fa5f6f86e517565b77a1fa37f59" prot="public" static="no">
        <name>PICOTEST_ABORT</name>
        <param></param>
        <briefdescription>
<para>Abort a test case. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be used to implement custom testing logic.</para>
<para><simplesect kind="see"><para><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="662" column="9" bodyfile="include/picotest.h" bodystart="662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__assertions_1ga595654acabcad939ec980f6bff185ac2" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int picoTest_fail</definition>
        <argsstring></argsstring>
        <name>picoTest_fail</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="645" column="1" bodyfile="include/picotest.h" bodystart="645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__assertions_1ga2b15359007b17554685f0c42fdd56eae" prot="public" static="yes" mutable="no">
        <type>jmp_buf *</type>
        <definition>jmp_buf* picoTest_failureEnv</definition>
        <argsstring></argsstring>
        <name>picoTest_failureEnv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="653" column="1" bodyfile="include/picotest.h" bodystart="653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__assertions_1ga0287f1bec06763a541b02c24e52fdb7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_assertFailed</definition>
        <argsstring>(PicoTestFailureLoggerProc *proc, const char *file, int line, const char *type, int count, const char *test,...)</argsstring>
        <name>picoTest_assertFailed</name>
        <param>
          <type><ref refid="group__public__interface_1ga407922fa95d91c28651b93fbafe1d1bb" kindref="member">PicoTestFailureLoggerProc</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>test</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="680" column="1" bodyfile="include/picotest.h" bodystart="680" bodyend="693"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Assertion Hooks</header>
      <description><para>PicoTest provides a way for client code to intercept assertions events. This can be used for e.g. logging purpose or reporting. </para>
</description>
      <memberdef kind="define" id="group__assertions_1gaa38b1a0014fe2ab172a5466f9031aafb" prot="public" static="no">
        <name>PICOTEST_ASSERT_BEFORE</name>
        <briefdescription>
<para>Define the assert before hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__assertions_1ga2011048ceed2457e95498573d0730eaf" kindref="member">PicoTestAssertBeforeProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__assertions_1ga2011048ceed2457e95498573d0730eaf" kindref="member">PicoTestAssertBeforeProc</ref><sp/>beforeAssert;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_ASSERT_BEFORE</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_ASSERT_BEFORE<sp/>beforeAssert</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beforeAssert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;before<sp/>assertion<sp/>%s(%s)...\n&quot;</highlight><highlight class="normal">,<sp/>type,<sp/>test);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__assertions_1ga2011048ceed2457e95498573d0730eaf" kindref="member">PicoTestAssertBeforeProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__assertions_1gae6c0c62e54611c6d92a3a8b81545f934" kindref="member">PICOTEST_ASSERT_AFTER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="751" column="9" bodyfile="include/picotest.h" bodystart="751" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__assertions_1gae6c0c62e54611c6d92a3a8b81545f934" prot="public" static="no">
        <name>PICOTEST_ASSERT_AFTER</name>
        <briefdescription>
<para>Define the assert after hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__assertions_1ga9502bbfe9927766f12e8de83aa37b706" kindref="member">PicoTestAssertAfterProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__assertions_1ga9502bbfe9927766f12e8de83aa37b706" kindref="member">PicoTestAssertAfterProc</ref><sp/>afterAssert;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_ASSERT_AFTER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_ASSERT_AFTER<sp/>afterAssert</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>afterAssert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(--level);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;after<sp/>assertion<sp/>%s(%s)<sp/>=&gt;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>type,<sp/>test,<sp/>fail<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;fails&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;passes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__assertions_1ga9502bbfe9927766f12e8de83aa37b706" kindref="member">PicoTestAssertAfterProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__assertions_1gaa38b1a0014fe2ab172a5466f9031aafb" kindref="member">PICOTEST_ASSERT_BEFORE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="803" column="9" bodyfile="include/picotest.h" bodystart="803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__assertions_1ga2011048ceed2457e95498573d0730eaf" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestAssertBeforeProc(const char *type, const char *test)</definition>
        <argsstring>(const char *type, const char *test)</argsstring>
        <name>PicoTestAssertBeforeProc</name>
        <briefdescription>
<para>Function signature of assert before hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called before running an assertion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of test (e.g. &quot;ASSERT&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test</parametername>
</parameternamelist>
<parameterdescription>
<para>Test.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__assertions_1ga2011048ceed2457e95498573d0730eaf" kindref="member">PicoTestAssertBeforeProc</ref><sp/>beforeAssert;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_ASSERT_BEFORE</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_ASSERT_BEFORE<sp/>beforeAssert</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beforeAssert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;before<sp/>assertion<sp/>%s(%s)...\n&quot;</highlight><highlight class="normal">,<sp/>type,<sp/>test);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__assertions_1gaa38b1a0014fe2ab172a5466f9031aafb" kindref="member">PICOTEST_ASSERT_BEFORE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="722" column="1" bodyfile="include/picotest.h" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__assertions_1ga9502bbfe9927766f12e8de83aa37b706" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestAssertAfterProc(const char *type, const char *test, int fail)</definition>
        <argsstring>(const char *type, const char *test, int fail)</argsstring>
        <name>PicoTestAssertAfterProc</name>
        <briefdescription>
<para>Function signature of assert after hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called after running an assertion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of test (e.g. &quot;ASSERT&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test</parametername>
</parameternamelist>
<parameterdescription>
<para>Test. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail</parametername>
</parameternamelist>
<parameterdescription>
<para>Test result: zero for success, non-zero for failure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Message format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Message string arguments.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__assertions_1ga9502bbfe9927766f12e8de83aa37b706" kindref="member">PicoTestAssertAfterProc</ref><sp/>afterAssert;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_ASSERT_AFTER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_ASSERT_AFTER<sp/>afterAssert</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>afterAssert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(--level);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;after<sp/>assertion<sp/>%s(%s)<sp/>=&gt;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>type,<sp/>test,<sp/>fail<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;fails&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;passes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__assertions_1gae6c0c62e54611c6d92a3a8b81545f934" kindref="member">PICOTEST_ASSERT_AFTER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="772" column="1" bodyfile="include/picotest.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__assertions_1gaf24af47f297f3e4460d9af2f55be6d67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_beforeAssert</definition>
        <argsstring>(const char *type, const char *test)</argsstring>
        <name>picoTest_beforeAssert</name>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>test</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="730" column="1" bodyfile="include/picotest.h" bodystart="730" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="group__assertions_1ga9ff53eb3221368fa7a9964eb2e5c64da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_afterAssert</definition>
        <argsstring>(const char *type, const char *test, int fail)</argsstring>
        <name>picoTest_afterAssert</name>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>test</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="781" column="1" bodyfile="include/picotest.h" bodystart="781" bodyend="782"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Test Fixture Definitions</header>
      <memberdef kind="define" id="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" prot="public" static="no">
        <name>PICOTEST_FIXTURE_CONTEXT</name>
        <param><defname>_fixtureName</defname></param>
        <briefdescription>
<para>Test fixture context declaration. </para>
        </briefdescription>
        <detaileddescription>
<para>Fixtures can optionally define a context structure that is passed to its setup and teardown functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fixtureName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the fixture.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="mainSuite.inc"><codeline><highlight class="comment">/*<sp/>Fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT</ref>(fixtureWithContext)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*var3;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="main_suite_8inc" kindref="compound">mainSuite.inc</ref> Example of a simple PicoTest suite. <linebreak/>
 <ref refid="fixtures_8c" kindref="compound">fixtures.c</ref> Demonstrates test fixture call sequences. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga1e98cba23391e13521100528ee1a2181" kindref="member">PICOTEST_FIXTURE_SETUP</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga0d887bdb08e22489fc3cf9fb28a35fd1" kindref="member">PICOTEST_FIXTURE_TEARDOWN</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="843" column="9" bodyfile="include/picotest.h" bodystart="843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fixtures_1ga1e98cba23391e13521100528ee1a2181" prot="public" static="no">
        <name>PICOTEST_FIXTURE_SETUP</name>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Test fixture initialization. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fixtureName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the fixture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_context</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Fixture context structure defined using <ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT(_fixtureName)</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para>A simple fixture with no context: <programlisting filename="mainSuite.inc"><codeline><highlight class="comment">/*<sp/>Simple<sp/>fixture<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga1e98cba23391e13521100528ee1a2181" kindref="member">PICOTEST_FIXTURE_SETUP</ref>(simpleFixture)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>srand(1234);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga0d887bdb08e22489fc3cf9fb28a35fd1" kindref="member">PICOTEST_FIXTURE_TEARDOWN</ref>(simpleFixture)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>srand(clock());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> A more complex example with a context structure:</para>
</simplesect>
<programlisting filename="mainSuite.inc"><codeline></codeline>
<codeline><highlight class="comment">/*<sp/>Fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT</ref>(fixtureWithContext)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*var3;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="comment">/*<sp/>Fixture<sp/>setup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga1e98cba23391e13521100528ee1a2181" kindref="member">PICOTEST_FIXTURE_SETUP</ref>(fixtureWithContext,<sp/>context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;var1<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;var2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;var3<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>malloc(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fixture<sp/>teardown<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga0d887bdb08e22489fc3cf9fb28a35fd1" kindref="member">PICOTEST_FIXTURE_TEARDOWN</ref>(fixtureWithContext,<sp/>context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>free(context-&gt;var3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Fixtures may define an optional context that test cases don&apos;t need, in this case the context passed to the setup and teardown functions is <bold>NULL</bold>: <programlisting filename="mainSuite.inc"><codeline><highlight class="comment">/*<sp/>Fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT</ref>(fixtureWithOptionalContext)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fixture<sp/>setup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga1e98cba23391e13521100528ee1a2181" kindref="member">PICOTEST_FIXTURE_SETUP</ref>(fixtureWithOptionalContext,<sp/>context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticVar++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>malloc(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fixture<sp/>teardown<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga0d887bdb08e22489fc3cf9fb28a35fd1" kindref="member">PICOTEST_FIXTURE_TEARDOWN</ref>(fixtureWithOptionalContext,<sp/>context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(context-&gt;buffer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>Here is an example of such a test case: <programlisting filename="mainSuite.inc"><codeline><highlight class="normal"><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref>(testCase5,<sp/>fixtureWithOptionalContext)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gacd07b017f38d1e3ad784f369345357a2" kindref="member">PICOTEST_VERIFY</ref>(staticVar<sp/>==<sp/>3);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref>(PASSES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="par"><title>Examples</title><para><ref refid="main_suite_8inc" kindref="compound">mainSuite.inc</ref> Example of a simple PicoTest suite. <linebreak/>
 <ref refid="fixtures_8c" kindref="compound">fixtures.c</ref> Demonstrates test fixture call sequences. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga0d887bdb08e22489fc3cf9fb28a35fd1" kindref="member">PICOTEST_FIXTURE_TEARDOWN</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="878" column="13" bodyfile="include/picotest.h" bodystart="878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fixtures_1ga0d887bdb08e22489fc3cf9fb28a35fd1" prot="public" static="no">
        <name>PICOTEST_FIXTURE_TEARDOWN</name>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Test fixture cleanup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_fixtureName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the fixture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_context</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Fixture context structure defined using <ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT(_fixtureName)</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para>A simple fixture with no context: <programlisting filename="mainSuite.inc"><codeline><highlight class="comment">/*<sp/>Simple<sp/>fixture<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga1e98cba23391e13521100528ee1a2181" kindref="member">PICOTEST_FIXTURE_SETUP</ref>(simpleFixture)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>srand(1234);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga0d887bdb08e22489fc3cf9fb28a35fd1" kindref="member">PICOTEST_FIXTURE_TEARDOWN</ref>(simpleFixture)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>srand(clock());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> A more complex example with a context structure:</para>
</simplesect>
<programlisting filename="mainSuite.inc"><codeline></codeline>
<codeline><highlight class="comment">/*<sp/>Fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT</ref>(fixtureWithContext)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*var3;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="comment">/*<sp/>Fixture<sp/>setup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga1e98cba23391e13521100528ee1a2181" kindref="member">PICOTEST_FIXTURE_SETUP</ref>(fixtureWithContext,<sp/>context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;var1<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;var2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;var3<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>malloc(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fixture<sp/>teardown<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga0d887bdb08e22489fc3cf9fb28a35fd1" kindref="member">PICOTEST_FIXTURE_TEARDOWN</ref>(fixtureWithContext,<sp/>context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>free(context-&gt;var3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Fixtures may define an optional context that test cases don&apos;t need, in this case the context passed to the setup and teardown functions is <bold>NULL</bold>: <programlisting filename="mainSuite.inc"><codeline><highlight class="comment">/*<sp/>Fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT</ref>(fixtureWithOptionalContext)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fixture<sp/>setup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga1e98cba23391e13521100528ee1a2181" kindref="member">PICOTEST_FIXTURE_SETUP</ref>(fixtureWithOptionalContext,<sp/>context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticVar++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context-&gt;buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>malloc(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fixture<sp/>teardown<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga0d887bdb08e22489fc3cf9fb28a35fd1" kindref="member">PICOTEST_FIXTURE_TEARDOWN</ref>(fixtureWithOptionalContext,<sp/>context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>static<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>staticVar<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>fixture<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(context-&gt;buffer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>Here is an example of such a test case: <programlisting filename="mainSuite.inc"><codeline><highlight class="normal"><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref>(testCase5,<sp/>fixtureWithOptionalContext)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gacd07b017f38d1e3ad784f369345357a2" kindref="member">PICOTEST_VERIFY</ref>(staticVar<sp/>==<sp/>3);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" kindref="member">PICOTEST_ASSERT</ref>(PASSES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="par"><title>Examples</title><para><ref refid="main_suite_8inc" kindref="compound">mainSuite.inc</ref> Example of a simple PicoTest suite. <linebreak/>
 <ref refid="fixtures_8c" kindref="compound">fixtures.c</ref> Demonstrates test fixture call sequences. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" kindref="member">PICOTEST_FIXTURE_CONTEXT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga1e98cba23391e13521100528ee1a2181" kindref="member">PICOTEST_FIXTURE_SETUP</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="927" column="13" bodyfile="include/picotest.h" bodystart="927" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Test Fixture Hooks</header>
      <description><para>PicoTest provides a way for client code to intercept test fixture events. This can be used for e.g. logging purpose or reporting. </para>
</description>
      <memberdef kind="define" id="group__fixtures_1gab6053367243af2ee7745bf35a3baaa4e" prot="public" static="no">
        <name>PICOTEST_FIXTURE_BEFORE_SETUP</name>
        <briefdescription>
<para>Define the test fixture before setup hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__fixtures_1ga78ede622d468ebbe0bcc47698146ead9" kindref="member">PicoTestFixtureBeforeSetupProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga78ede622d468ebbe0bcc47698146ead9" kindref="member">PicoTestFixtureBeforeSetupProc</ref><sp/>beforeSetup;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FIXTURE_BEFORE_SETUP</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_BEFORE_SETUP<sp/>beforeSetup</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beforeSetup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;fixture<sp/>%s<sp/>setup...&quot;</highlight><highlight class="normal">,<sp/>fixtureName);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga78ede622d468ebbe0bcc47698146ead9" kindref="member">PicoTestFixtureBeforeSetupProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga679063021accc32a74c1e617ed68423f" kindref="member">PICOTEST_FIXTURE_AFTER_SETUP</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1004" column="9" bodyfile="include/picotest.h" bodystart="1004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fixtures_1ga679063021accc32a74c1e617ed68423f" prot="public" static="no">
        <name>PICOTEST_FIXTURE_AFTER_SETUP</name>
        <briefdescription>
<para>Define the test fixture after setup hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__fixtures_1gae75749e42f2c93cfedae9220ad149e00" kindref="member">PicoTestFixtureAfterSetupProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1gae75749e42f2c93cfedae9220ad149e00" kindref="member">PicoTestFixtureAfterSetupProc</ref><sp/>afterSetup;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FIXTURE_AFTER_SETUP</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_AFTER_SETUP<sp/>afterSetup</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>afterSetup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>--level;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1gae75749e42f2c93cfedae9220ad149e00" kindref="member">PicoTestFixtureAfterSetupProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1gab6053367243af2ee7745bf35a3baaa4e" kindref="member">PICOTEST_FIXTURE_BEFORE_SETUP</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1053" column="9" bodyfile="include/picotest.h" bodystart="1053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fixtures_1gaf68cbda0bf19afd7994c2e0a15278f8d" prot="public" static="no">
        <name>PICOTEST_FIXTURE_BEFORE_TEARDOWN</name>
        <briefdescription>
<para>Define the test fixture before teardown hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__fixtures_1ga154395391c0e95f5b08acaf38d2ef296" kindref="member">PicoTestFixtureBeforeTeardownProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga154395391c0e95f5b08acaf38d2ef296" kindref="member">PicoTestFixtureBeforeTeardownProc</ref><sp/>beforeTeardown;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FIXTURE_BEFORE_TEARDOWN</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_BEFORE_TEARDOWN<sp/>beforeTeardown</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beforeTeardown(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;fixture<sp/>%s<sp/>teardown...&quot;</highlight><highlight class="normal">,<sp/>fixtureName);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga154395391c0e95f5b08acaf38d2ef296" kindref="member">PicoTestFixtureBeforeTeardownProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga1a910236e326a942bc3a5be5c6013520" kindref="member">PICOTEST_FIXTURE_AFTER_TEARDOWN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1103" column="9" bodyfile="include/picotest.h" bodystart="1103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__fixtures_1ga1a910236e326a942bc3a5be5c6013520" prot="public" static="no">
        <name>PICOTEST_FIXTURE_AFTER_TEARDOWN</name>
        <briefdescription>
<para>Define the test fixture after teardown hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__fixtures_1gad1e2073b337cd5697af642ce44c98db4" kindref="member">PicoTestFixtureAfterTeardownProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1gad1e2073b337cd5697af642ce44c98db4" kindref="member">PicoTestFixtureAfterTeardownProc</ref><sp/>afterTeardown;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FIXTURE_AFTER_TEARDOWN</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_AFTER_TEARDOWN<sp/>afterTeardown</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>afterTeardown(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>--level;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1gad1e2073b337cd5697af642ce44c98db4" kindref="member">PicoTestFixtureAfterTeardownProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1gaf68cbda0bf19afd7994c2e0a15278f8d" kindref="member">PICOTEST_FIXTURE_BEFORE_TEARDOWN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1153" column="9" bodyfile="include/picotest.h" bodystart="1153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__fixtures_1ga78ede622d468ebbe0bcc47698146ead9" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestFixtureBeforeSetupProc(const char *fixtureName, const char *testName)</definition>
        <argsstring>(const char *fixtureName, const char *testName)</argsstring>
        <name>PicoTestFixtureBeforeSetupProc</name>
        <briefdescription>
<para>Function signature of test fixture before setup hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called before running the test fixture setup.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fixtureName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test fixture name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test case name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga78ede622d468ebbe0bcc47698146ead9" kindref="member">PicoTestFixtureBeforeSetupProc</ref><sp/>beforeSetup;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FIXTURE_BEFORE_SETUP</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_BEFORE_SETUP<sp/>beforeSetup</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beforeSetup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;fixture<sp/>%s<sp/>setup...&quot;</highlight><highlight class="normal">,<sp/>fixtureName);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1gab6053367243af2ee7745bf35a3baaa4e" kindref="member">PICOTEST_FIXTURE_BEFORE_SETUP</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="973" column="1" bodyfile="include/picotest.h" bodystart="973" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__fixtures_1gae75749e42f2c93cfedae9220ad149e00" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestFixtureAfterSetupProc(const char *fixtureName, const char *testName)</definition>
        <argsstring>(const char *fixtureName, const char *testName)</argsstring>
        <name>PicoTestFixtureAfterSetupProc</name>
        <briefdescription>
<para>Function signature of test fixture after setup hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called after running the test fixture setup.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fixtureName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test fixture name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test case name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1gae75749e42f2c93cfedae9220ad149e00" kindref="member">PicoTestFixtureAfterSetupProc</ref><sp/>afterSetup;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FIXTURE_AFTER_SETUP</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_AFTER_SETUP<sp/>afterSetup</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>afterSetup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>--level;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga679063021accc32a74c1e617ed68423f" kindref="member">PICOTEST_FIXTURE_AFTER_SETUP</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1022" column="1" bodyfile="include/picotest.h" bodystart="1022" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__fixtures_1ga154395391c0e95f5b08acaf38d2ef296" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestFixtureBeforeTeardownProc(const char *fixtureName, const char *testName, int fail)</definition>
        <argsstring>(const char *fixtureName, const char *testName, int fail)</argsstring>
        <name>PicoTestFixtureBeforeTeardownProc</name>
        <briefdescription>
<para>Function signature of test fixture before teardown hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called before running the test fixture teardown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fixtureName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test fixture name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test case name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail</parametername>
</parameternamelist>
<parameterdescription>
<para>Failed tests (including its subtests if any).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1ga154395391c0e95f5b08acaf38d2ef296" kindref="member">PicoTestFixtureBeforeTeardownProc</ref><sp/>beforeTeardown;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FIXTURE_BEFORE_TEARDOWN</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_BEFORE_TEARDOWN<sp/>beforeTeardown</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beforeTeardown(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;fixture<sp/>%s<sp/>teardown...&quot;</highlight><highlight class="normal">,<sp/>fixtureName);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1gaf68cbda0bf19afd7994c2e0a15278f8d" kindref="member">PICOTEST_FIXTURE_BEFORE_TEARDOWN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1072" column="1" bodyfile="include/picotest.h" bodystart="1072" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__fixtures_1gad1e2073b337cd5697af642ce44c98db4" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestFixtureAfterTeardownProc(const char *fixtureName, const char *testName, int fail)</definition>
        <argsstring>(const char *fixtureName, const char *testName, int fail)</argsstring>
        <name>PicoTestFixtureAfterTeardownProc</name>
        <briefdescription>
<para>Function signature of test fixture after teardown hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called after running the test fixture teardown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fixtureName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test fixture name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test case name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail</parametername>
</parameternamelist>
<parameterdescription>
<para>Failed tests (including its subtests if any).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__fixtures_1gad1e2073b337cd5697af642ce44c98db4" kindref="member">PicoTestFixtureAfterTeardownProc</ref><sp/>afterTeardown;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_FIXTURE_AFTER_TEARDOWN</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_AFTER_TEARDOWN<sp/>afterTeardown</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>afterTeardown(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>--level;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fixtures_1ga1a910236e326a942bc3a5be5c6013520" kindref="member">PICOTEST_FIXTURE_AFTER_TEARDOWN</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1122" column="1" bodyfile="include/picotest.h" bodystart="1122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__fixtures_1ga647e76d678176d1544aa7e6391551fd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_beforeSetup</definition>
        <argsstring>(const char *fixtureName, const char *testName)</argsstring>
        <name>picoTest_beforeSetup</name>
        <param>
          <type>const char *</type>
          <declname>fixtureName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>testName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="982" column="1" bodyfile="include/picotest.h" bodystart="982" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="group__fixtures_1ga30aa5012e97b77a401962e521595f460" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_afterSetup</definition>
        <argsstring>(const char *fixtureName, const char *testName)</argsstring>
        <name>picoTest_afterSetup</name>
        <param>
          <type>const char *</type>
          <declname>fixtureName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>testName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1031" column="1" bodyfile="include/picotest.h" bodystart="1031" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="group__fixtures_1gaee626123a7789994c2f2a2c82dc3b6cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_beforeTeardown</definition>
        <argsstring>(const char *fixtureName, const char *testName, int fail)</argsstring>
        <name>picoTest_beforeTeardown</name>
        <param>
          <type>const char *</type>
          <declname>fixtureName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>testName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1081" column="1" bodyfile="include/picotest.h" bodystart="1081" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="group__fixtures_1gad92477b902f06bcef4bf83ba96f3400a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_afterTeardown</definition>
        <argsstring>(const char *fixtureName, const char *testName, int fail)</argsstring>
        <name>picoTest_afterTeardown</name>
        <param>
          <type>const char *</type>
          <declname>fixtureName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>testName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1131" column="1" bodyfile="include/picotest.h" bodystart="1131" bodyend="1132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Test Suite Definitions</header>
      <memberdef kind="define" id="group__test__suites_1ga7a9c873e5e377bd88fcc4849689c1e6f" prot="public" static="no">
        <name>PICOTEST_SUITE</name>
        <param><defname>_suiteName</defname></param>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Test suite declaration. </para>
        </briefdescription>
        <detaileddescription>
<para>A test suite is a test function that is made of one or several subtests.</para>
<para>This macro defines a <ref refid="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" kindref="member">PicoTestProc</ref> of the given name that can be called directly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_suiteName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the test suite. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Names of the subtests in the suite.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of failed tests.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" kindref="member">PicoTestProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" kindref="member">PICOTEST_CASE</ref></para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="mainSuite.inc"><codeline><highlight class="comment">/*<sp/>Main<sp/>test<sp/>suite<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__suites_1ga7a9c873e5e377bd88fcc4849689c1e6f" kindref="member">PICOTEST_SUITE</ref>(mainSuite,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testCase1,<sp/>testCase2,<sp/>subSuite,<sp/>testCase3</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Sub-suite<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__suites_1ga7a9c873e5e377bd88fcc4849689c1e6f" kindref="member">PICOTEST_SUITE</ref>(subSuite,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testCase4,<sp/>testCase5</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="main_suite_8inc" kindref="compound">mainSuite.inc</ref> Example of a simple PicoTest suite. <linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1195" column="9" bodyfile="include/picotest.h" bodystart="1195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Test Suite Hooks</header>
      <description><para>PicoTest provides a way for client code to intercept test execution events on test suites and their subtests. This can be used for e.g. logging purpose or reporting. </para>
</description>
      <memberdef kind="define" id="group__test__suites_1gae569b3a4f05ebefc297411072e505fd3" prot="public" static="no">
        <name>PICOTEST_SUITE_ENTER</name>
        <briefdescription>
<para>Define the test suite enter hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__test__suites_1ga881ee23cced7bc4df9427409dcb55254" kindref="member">PicoTestSuiteEnterProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__suites_1ga881ee23cced7bc4df9427409dcb55254" kindref="member">PicoTestSuiteEnterProc</ref><sp/>enterTestSuite;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_SUITE_ENTER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_ENTER<sp/>enterTestSuite</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enterTestSuite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;running<sp/>test<sp/>suite<sp/>%s<sp/>(%d<sp/>subtests)...\n&quot;</highlight><highlight class="normal">,<sp/>suiteName,<sp/>nb);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1ga881ee23cced7bc4df9427409dcb55254" kindref="member">PicoTestSuiteEnterProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1ga2ce5e2f78882e9f26067dc4ca9d0570c" kindref="member">PICOTEST_SUITE_LEAVE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1322" column="9" bodyfile="include/picotest.h" bodystart="1322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__test__suites_1ga2ce5e2f78882e9f26067dc4ca9d0570c" prot="public" static="no">
        <name>PICOTEST_SUITE_LEAVE</name>
        <briefdescription>
<para>Define the test suite leave hook. </para>
        </briefdescription>
        <detaileddescription>
<para>Called after running all subtests.</para>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__test__suites_1gabc6f39019f0cde9f04812785aceaab09" kindref="member">PicoTestSuiteLeaveProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__suites_1gabc6f39019f0cde9f04812785aceaab09" kindref="member">PicoTestSuiteLeaveProc</ref><sp/>leaveTestSuite;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_SUITE_LEAVE</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_LEAVE<sp/>leaveTestSuite</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>leaveTestSuite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(--level);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;test<sp/>suite<sp/>%s<sp/>done<sp/>(%d<sp/>failures)\n&quot;</highlight><highlight class="normal">,<sp/>suiteName,<sp/>fail);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1gabc6f39019f0cde9f04812785aceaab09" kindref="member">PicoTestSuiteLeaveProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1gae569b3a4f05ebefc297411072e505fd3" kindref="member">PICOTEST_SUITE_ENTER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1371" column="9" bodyfile="include/picotest.h" bodystart="1371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__test__suites_1ga5a49439f633f383f0bb3d2a6e700d464" prot="public" static="no">
        <name>PICOTEST_SUITE_BEFORE_SUBTEST</name>
        <briefdescription>
<para>Define the test suite before subset hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__test__suites_1gade4d2a7d8a611ca76c675607529a3edb" kindref="member">PicoTestSuiteBeforeSubtestProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__suites_1gade4d2a7d8a611ca76c675607529a3edb" kindref="member">PicoTestSuiteBeforeSubtestProc</ref><sp/>beforeSubtest;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_SUITE_BEFORE_SUBTEST</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_BEFORE_SUBTEST<sp/>beforeSubtest</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beforeSubtest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;subtest<sp/>%s<sp/>(%d<sp/>out<sp/>of<sp/>%d)...\n&quot;</highlight><highlight class="normal">,<sp/>testName,<sp/>index+1,<sp/>nb);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1gade4d2a7d8a611ca76c675607529a3edb" kindref="member">PicoTestSuiteBeforeSubtestProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1gaab4493d86071cc9263827bf9a05a3b24" kindref="member">PICOTEST_SUITE_AFTER_SUBTEST</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1424" column="9" bodyfile="include/picotest.h" bodystart="1424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__test__suites_1gaab4493d86071cc9263827bf9a05a3b24" prot="public" static="no">
        <name>PICOTEST_SUITE_AFTER_SUBTEST</name>
        <briefdescription>
<para>Define the test suite after subset hook. </para>
        </briefdescription>
        <detaileddescription>
<para>The default hook does nothing. Redefine this macro to use a custom hook, which must follow the <ref refid="group__test__suites_1ga80efec0204108859c9ececa3921f6f76" kindref="member">PicoTestSuiteAfterSubtestProc</ref> signature.</para>
<para><simplesect kind="note"><para>Custom functions only apply to the tests defined after the macro redefinition. As macros can be redefined several times, this means that different functions may apply for the same source.</para>
</simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__suites_1ga80efec0204108859c9ececa3921f6f76" kindref="member">PicoTestSuiteAfterSubtestProc</ref><sp/>afterSubtest;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_SUITE_AFTER_SUBTEST</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_AFTER_SUBTEST<sp/>afterSubtest</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>afterSubtest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(--level);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;=&gt;<sp/>subtest<sp/>%s<sp/>done<sp/>(%d<sp/>failed)...\n&quot;</highlight><highlight class="normal">,<sp/>testName,<sp/>sfail);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1ga80efec0204108859c9ececa3921f6f76" kindref="member">PicoTestSuiteAfterSubtestProc</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1ga5a49439f633f383f0bb3d2a6e700d464" kindref="member">PICOTEST_SUITE_BEFORE_SUBTEST</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1479" column="9" bodyfile="include/picotest.h" bodystart="1479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__test__suites_1ga881ee23cced7bc4df9427409dcb55254" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestSuiteEnterProc(const char *suiteName, int nb)</definition>
        <argsstring>(const char *suiteName, int nb)</argsstring>
        <name>PicoTestSuiteEnterProc</name>
        <briefdescription>
<para>Function signature of test suite enter hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called before running the first subtest.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suiteName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test suite name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of subtests.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__suites_1ga881ee23cced7bc4df9427409dcb55254" kindref="member">PicoTestSuiteEnterProc</ref><sp/>enterTestSuite;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_SUITE_ENTER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_ENTER<sp/>enterTestSuite</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enterTestSuite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;running<sp/>test<sp/>suite<sp/>%s<sp/>(%d<sp/>subtests)...\n&quot;</highlight><highlight class="normal">,<sp/>suiteName,<sp/>nb);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1gae569b3a4f05ebefc297411072e505fd3" kindref="member">PICOTEST_SUITE_ENTER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1293" column="1" bodyfile="include/picotest.h" bodystart="1293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__test__suites_1gabc6f39019f0cde9f04812785aceaab09" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestSuiteLeaveProc(const char *suiteName, int nb, int fail)</definition>
        <argsstring>(const char *suiteName, int nb, int fail)</argsstring>
        <name>PicoTestSuiteLeaveProc</name>
        <briefdescription>
<para>Function signature of test suite leave hooks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suiteName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test suite name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of subtests. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of failed subtests (including the subtests&apos; subtests if any).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__suites_1gabc6f39019f0cde9f04812785aceaab09" kindref="member">PicoTestSuiteLeaveProc</ref><sp/>leaveTestSuite;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_SUITE_LEAVE</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_LEAVE<sp/>leaveTestSuite</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>leaveTestSuite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(--level);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;test<sp/>suite<sp/>%s<sp/>done<sp/>(%d<sp/>failures)\n&quot;</highlight><highlight class="normal">,<sp/>suiteName,<sp/>fail);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1ga2ce5e2f78882e9f26067dc4ca9d0570c" kindref="member">PICOTEST_SUITE_LEAVE</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1340" column="1" bodyfile="include/picotest.h" bodystart="1340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__test__suites_1gade4d2a7d8a611ca76c675607529a3edb" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestSuiteBeforeSubtestProc(const char *suiteName, int nb, int fail, int index, const char *testName)</definition>
        <argsstring>(const char *suiteName, int nb, int fail, int index, const char *testName)</argsstring>
        <name>PicoTestSuiteBeforeSubtestProc</name>
        <briefdescription>
<para>Function signature of test suite before subtest hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called before running each subtest.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suiteName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test suite name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of subtests. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail</parametername>
</parameternamelist>
<parameterdescription>
<para>Failed test suite subtests so far (including its subtests&apos; subtests if any). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of subtest. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of subtest.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__suites_1gade4d2a7d8a611ca76c675607529a3edb" kindref="member">PicoTestSuiteBeforeSubtestProc</ref><sp/>beforeSubtest;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_SUITE_BEFORE_SUBTEST</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_BEFORE_SUBTEST<sp/>beforeSubtest</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beforeSubtest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(level++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;subtest<sp/>%s<sp/>(%d<sp/>out<sp/>of<sp/>%d)...\n&quot;</highlight><highlight class="normal">,<sp/>testName,<sp/>index+1,<sp/>nb);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1ga5a49439f633f383f0bb3d2a6e700d464" kindref="member">PICOTEST_SUITE_BEFORE_SUBTEST</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1393" column="1" bodyfile="include/picotest.h" bodystart="1393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__test__suites_1ga80efec0204108859c9ececa3921f6f76" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() PicoTestSuiteAfterSubtestProc(const char *suiteName, int nb, int fail, int index, const char *testName, int sfail)</definition>
        <argsstring>(const char *suiteName, int nb, int fail, int index, const char *testName, int sfail)</argsstring>
        <name>PicoTestSuiteAfterSubtestProc</name>
        <briefdescription>
<para>Function signature of test suite after subtest hooks. </para>
        </briefdescription>
        <detaileddescription>
<para>Called before running each subtest.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suiteName</parametername>
</parameternamelist>
<parameterdescription>
<para>Test suite name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of subtests. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail</parametername>
</parameternamelist>
<parameterdescription>
<para>Failed test suite subtests so far (including its subtests&apos; subtests if any). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of subtest. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of subtest. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sfail</parametername>
</parameternamelist>
<parameterdescription>
<para>The subtest&apos;s failed tests (including its subtests if any).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Usage</title><para><programlisting filename="hooks.c"><codeline><highlight class="comment">/*<sp/>Hook<sp/>declarations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__test__suites_1ga80efec0204108859c9ececa3921f6f76" kindref="member">PicoTestSuiteAfterSubtestProc</ref><sp/>afterSubtest;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PICOTEST_SUITE_AFTER_SUBTEST</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_AFTER_SUBTEST<sp/>afterSubtest</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Hook<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>afterSubtest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfail)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>indent(--level);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;=&gt;<sp/>subtest<sp/>%s<sp/>done<sp/>(%d<sp/>failed)...\n&quot;</highlight><highlight class="normal">,<sp/>testName,<sp/>sfail);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para><ref refid="hooks_8c" kindref="compound">hooks.c</ref> Example of PicoTest hooks, prints all events to stdout. <linebreak/>
 </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__test__suites_1gaab4493d86071cc9263827bf9a05a3b24" kindref="member">PICOTEST_SUITE_AFTER_SUBTEST</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1448" column="1" bodyfile="include/picotest.h" bodystart="1448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__test__suites_1ga5bc4119292d7cb86b645b0c4e0b51b8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_enterTestSuite</definition>
        <argsstring>(const char *suiteName, int nb)</argsstring>
        <name>picoTest_enterTestSuite</name>
        <param>
          <type>const char *</type>
          <declname>suiteName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1301" column="1" bodyfile="include/picotest.h" bodystart="1301" bodyend="1301"/>
      </memberdef>
      <memberdef kind="function" id="group__test__suites_1ga8a2f437d7d0a53f802e77d158567221a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_leaveTestSuite</definition>
        <argsstring>(const char *suiteName, int nb, int fail)</argsstring>
        <name>picoTest_leaveTestSuite</name>
        <param>
          <type>const char *</type>
          <declname>suiteName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1348" column="1" bodyfile="include/picotest.h" bodystart="1348" bodyend="1348"/>
      </memberdef>
      <memberdef kind="function" id="group__test__suites_1gab093971a14a1391e27696ef425173c23" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_beforeSubtest</definition>
        <argsstring>(const char *suiteName, int nb, int fail, int index, const char *testName)</argsstring>
        <name>picoTest_beforeSubtest</name>
        <param>
          <type>const char *</type>
          <declname>suiteName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fail</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>testName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1402" column="1" bodyfile="include/picotest.h" bodystart="1402" bodyend="1403"/>
      </memberdef>
      <memberdef kind="function" id="group__test__suites_1ga08d7616c2c00cd11b4709d4baee64f5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void picoTest_afterSubtest</definition>
        <argsstring>(const char *suiteName, int nb, int fail, int index, const char *testName, int sfail)</argsstring>
        <name>picoTest_afterSubtest</name>
        <param>
          <type>const char *</type>
          <declname>suiteName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fail</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>testName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sfail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1457" column="1" bodyfile="include/picotest.h" bodystart="1457" bodyend="1458"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="picotest_8h_1a9e72654d611dd79773814aac688dd1bc" prot="public" static="no">
        <name>_PICOTEST_STRINGIZE</name>
        <param><defname>arg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1503" column="9" bodyfile="include/picotest.h" bodystart="1503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="picotest_8h_1a8fdd0e34f725f8e37ca020d13d056001" prot="public" static="no">
        <name>_PICOTEST_CONCATENATE</name>
        <param><defname>arg1</defname></param>
        <param><defname>arg2</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1509" column="9" bodyfile="include/picotest.h" bodystart="1509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="picotest_8h_1a921cd46c5670838c4e662e3e35caf680" prot="public" static="no">
        <name>_PICOTEST_ARGCOUNT</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1552" column="13" bodyfile="include/picotest.h" bodystart="1552" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="picotest_8h_1aa36b887c3add49c79e23a95ba5b733b2" prot="public" static="no">
        <name>_PICOTEST_FOR_EACH</name>
        <param><defname>what</defname></param>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/picotest.h" line="1590" column="13" bodyfile="include/picotest.h" bodystart="1590" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file defines a minimalist unit testing framework for C programs. </para>
    </briefdescription>
    <detaileddescription>
<para>The assertion mechanism relies on <computeroutput>setjmp()</computeroutput> / <computeroutput>longjmp()</computeroutput>. While these functions are discouraged for production code, their usage is acceptable in the context of unit testing: in our case, <computeroutput>longjmp()</computeroutput> is only called when an assertion fails, a situation where the actual process state is no longer reliable anyway. Moreover, they constitute the only standard exception handling mechanism for plain C code.</para>
<para><simplesect kind="par"><title>License</title><para></para>
</simplesect>
PicoTest is released under the terms of the The 3-Clause BSD License:</para>
<para><ulink url="https://opensource.org/licenses/BSD-3-Clause">https://opensource.org/licenses/BSD-3-Clause</ulink></para>
<para>Copyright (c) 2018 Frederic Bonnet</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para><orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem><listitem><para>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
</listitem></orderedlist>
</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="48"><highlight class="preprocessor">#ifndef<sp/>_PICOTEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;setjmp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_PARENS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(_MSC_VER)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor">#define<sp/>PICOTEST_VERSION<sp/>&quot;1.2.0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_VERSION_MAJOR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_VERSION_MINOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PICOTEST_VERSION_PATCH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(<ref refid="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" kindref="member">PicoTestProc</ref>)<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>cond);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="group__public__interface_1gaf5acf1a68605f6c8b758bae0224e03fc" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__public__interface_1gaf5acf1a68605f6c8b758bae0224e03fc" kindref="member">PicoTestFilterResult</ref><sp/>{</highlight></codeline>
<codeline lineno="130" refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca0ee37a1cf8a2347fb3c42636dfb80b1c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca0ee37a1cf8a2347fb3c42636dfb80b1c" kindref="member">PICOTEST_FILTER_SKIP</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca35508816a12c32e7ce536786e5ffc8d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca35508816a12c32e7ce536786e5ffc8d9" kindref="member">PICOTEST_FILTER_PASS</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca487de7ecca4099ee737bd41a8d75ba75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fca487de7ecca4099ee737bd41a8d75ba75" kindref="member">PICOTEST_FILTER_SKIP_PROPAGATE</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fcaf2aa19fa3a0a1bc56585df626aa8e188" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__public__interface_1ggaf5acf1a68605f6c8b758bae0224e03fcaf2aa19fa3a0a1bc56585df626aa8e188" kindref="member">PICOTEST_FILTER_PASS_PROPAGATE</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}<sp/><ref refid="group__public__interface_1gaf5acf1a68605f6c8b758bae0224e03fc" kindref="member">PicoTestFilterResult</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="group__public__interface_1gafc743c5aa3870900472bc701b3ad35a4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__public__interface_1gaf5acf1a68605f6c8b758bae0224e03fc" kindref="member">PicoTestFilterResult</ref><sp/>(<ref refid="group__public__interface_1gafc743c5aa3870900472bc701b3ad35a4" kindref="member">PicoTestFilterProc</ref>)<sp/>(<ref refid="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" kindref="member">PicoTestProc</ref><sp/>*test,<sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>cond);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="group__public__interface_1ga47f93260349371f63f95900166cf7858" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_FILTER(_test,<sp/>_testName,<sp/>_cond)<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(strcmp((_testName),<sp/>(_cond))<sp/>==<sp/>0<sp/>?<sp/>PICOTEST_FILTER_PASS<sp/>:<sp/>PICOTEST_FILTER_SKIP_PROPAGATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="group__public__interface_1ga0b6b1fbb66a2062b823d28026399d27b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__public__interface_1ga0b6b1fbb66a2062b823d28026399d27b" kindref="member">PicoTestTraverseProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="group__public__interface_1gaee8202c2543c7fb59fa08aec75b6cc63" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_TRAVERSE(_testName,<sp/>_proc)<sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_testName##_traverse(_proc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="group__public__interface_1ga407922fa95d91c28651b93fbafe1d1bb" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__public__interface_1ga407922fa95d91c28651b93fbafe1d1bb" kindref="member">PicoTestFailureLoggerProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>va_list<sp/>args);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_logFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>va_list<sp/>args)<sp/>{}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="group__public__interface_1gae4b2f943bef59bd05fb7a328a6c39d48" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_FAILURE_LOGGER<sp/>picoTest_logFailure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor">#if<sp/>defined(_PICOTEST_PARENS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>PICOTEST_CASE(...)<sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_CONCATENATE(_PICOTEST_CASE_,_PICOTEST_ARGCOUNT(__VA_ARGS__))<sp/>_PICOTEST_PARENS(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="group__test__cases_1gadca8898d29eb42dde764ed83a5d9faf5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>PICOTEST_CASE(...)<sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_CONCATENATE(_PICOTEST_CASE_,_PICOTEST_ARGCOUNT(__VA_ARGS__))(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(_PICOTEST_PARENS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor">#define<sp/>_PICOTEST_CASE_DECLARE(_testName)<sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>_testName##_testCaseRunner(void);<sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>_testName##_traverse(PicoTestTraverseProc<sp/>*proc)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc(_PICOTEST_STRINGIZE(_testName),<sp/>0);<sp/>\</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="355"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>_testName(const<sp/>char<sp/>*cond)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>fail=0;<sp/>\</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PicoTestFilterResult<sp/>filterResult<sp/>=<sp/>(cond<sp/>==<sp/>NULL)<sp/>\</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>PICOTEST_FILTER_PASS<sp/>\</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>PICOTEST_FILTER(_testName,<sp/>_PICOTEST_STRINGIZE(_testName),<sp/>cond);<sp/>\</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(filterResult)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PICOTEST_FILTER_PASS:<sp/>\</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PICOTEST_FILTER_PASS_PROPAGATE:<sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail<sp/>+=<sp/>_testName##_testCaseRunner();<sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fail;<sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_CASE_RUNNER_BEGIN(_testName)<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>_testName##_testCaseRunner()<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>abort;<sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jmp_buf<sp/>failureEnv;<sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jmp_buf<sp/>*oldEnv<sp/>=<sp/>picoTest_failureEnv;<sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>fail,<sp/>oldFail<sp/>=<sp/>picoTest_fail;<sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>picoTest_failureEnv<sp/>=<sp/>&amp;failureEnv;<sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>picoTest_fail<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PICOTEST_CASE_ENTER(_PICOTEST_STRINGIZE(_testName));<sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort<sp/>=<sp/>setjmp(failureEnv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_CASE_RUNNER_END(_testName)<sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail<sp/>=<sp/>picoTest_fail;<sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PICOTEST_CASE_LEAVE(_PICOTEST_STRINGIZE(_testName),<sp/>fail);<sp/>\</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>picoTest_failureEnv<sp/>=<sp/>oldEnv;<sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>picoTest_fail<sp/>=<sp/>oldFail;<sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fail;<sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_CASE_1(_testName)<sp/>\</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CASE_DECLARE(_testName)<sp/>\</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_testName##_testCase(void);<sp/>\</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CASE_RUNNER_BEGIN(_testName)<sp/>\</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!abort)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_testName##_testCase();<sp/>\</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CASE_RUNNER_END(_testName)<sp/>\</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_testName##_testCase(void)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_CASE_2(_testName,<sp/>_fixtureName)<sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CASE_DECLARE(_testName)<sp/>\</highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_testName##_testCase(void);<sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CASE_RUNNER_BEGIN(_testName)<sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!abort)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_FIXTURE_CALL_SETUP(_fixtureName,<sp/>_testName,<sp/>NULL);<sp/>\</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_testName##_testCase();<sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_FIXTURE_CALL_TEARDOWN(_fixtureName,<sp/>_testName,<sp/>NULL,<sp/>picoTest_fail);<sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CASE_RUNNER_END(_testName)<sp/>\</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_testName##_testCase()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_CASE_3(_testName,<sp/>_fixtureName,<sp/>_context)<sp/>\</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CASE_DECLARE(_testName)<sp/>\</highlight></codeline>
<codeline lineno="412"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_testName##_testCase(struct<sp/>_fixtureName##_Context<sp/>*);<sp/>\</highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CASE_RUNNER_BEGIN(_testName)<sp/>\</highlight></codeline>
<codeline lineno="414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>_fixtureName##_Context<sp/>context;<sp/>\</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!abort)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="417"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_FIXTURE_CALL_SETUP(_fixtureName,<sp/>_testName,<sp/>&amp;context);<sp/>\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_testName##_testCase(&amp;context);<sp/>\</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_FIXTURE_CALL_TEARDOWN(_fixtureName,<sp/>_testName,<sp/>&amp;context,<sp/>picoTest_fail);<sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CASE_RUNNER_END(_testName)<sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_testName##_testCase(struct<sp/>_fixtureName##_Context<sp/>*<sp/>_context)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="group__test__cases_1ga0af0a0ec6d2bbee706b56fea6f60126e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__test__cases_1ga0af0a0ec6d2bbee706b56fea6f60126e" kindref="member">PicoTestCaseEnterProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_enterTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="group__test__cases_1gad1f702ab6600b04f66731d35bf38fc67" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_CASE_ENTER<sp/>picoTest_enterTestCase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="group__test__cases_1gacce6ae69ea5064e39e3c56915978609e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__test__cases_1gacce6ae69ea5064e39e3c56915978609e" kindref="member">PicoTestCaseLeaveProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_leaveTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="group__test__cases_1ga4fd71dfed1ce3733b0d670c86b8d523a" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_CASE_LEAVE<sp/>picoTest_leaveTestCase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="group__assertions_1gad71b76cf1173654acc95df79d1c7040b" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_ASSERT(x,<sp/></highlight><highlight class="comment">/*<sp/>msg,<sp/>*/</highlight><highlight class="preprocessor"><sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_ASSERT(x,<sp/>#x,<sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor">#define<sp/>_PICOTEST_ASSERT(x,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PICOTEST_ASSERT_BEFORE(&quot;ASSERT&quot;,<sp/>#x);<sp/>\</highlight></codeline>
<codeline lineno="575"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{int<sp/>_PICOTEST_FAIL<sp/>=<sp/>!(x);<sp/>\</highlight></codeline>
<codeline lineno="576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PICOTEST_ASSERT_AFTER(&quot;ASSERT&quot;,<sp/>#x,<sp/>_PICOTEST_FAIL);<sp/>\</highlight></codeline>
<codeline lineno="577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(_PICOTEST_FAIL)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PICOTEST_FAILURE(&quot;ASSERT&quot;,<sp/>##<sp/>__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PICOTEST_ABORT();<sp/>\</highlight></codeline>
<codeline lineno="580"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="604" refid="group__assertions_1gacd07b017f38d1e3ad784f369345357a2" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_VERIFY(x,<sp/></highlight><highlight class="comment">/*<sp/>msg,<sp/>*/</highlight><highlight class="preprocessor"><sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="605"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_VERIFY(x,<sp/>#x,<sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="preprocessor">#define<sp/>_PICOTEST_VERIFY(x,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PICOTEST_ASSERT_BEFORE(&quot;VERIFY&quot;,<sp/>#x);<sp/>\</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{int<sp/>_PICOTEST_FAIL<sp/>=<sp/>!(x);<sp/>\</highlight></codeline>
<codeline lineno="611"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PICOTEST_ASSERT_AFTER(&quot;VERIFY&quot;,<sp/>#x,<sp/>_PICOTEST_FAIL);<sp/>\</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(_PICOTEST_FAIL)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="613"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PICOTEST_FAILURE(&quot;VERIFY&quot;,<sp/>##<sp/>__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="614"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="630" refid="group__assertions_1ga89a35f18021df570967bb707a8537f3b" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_FAILURE(type,<sp/>test,<sp/></highlight><highlight class="comment">/*<sp/>msg,<sp/>*/</highlight><highlight class="preprocessor"><sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_FAILURE(type,<sp/>test,<sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="preprocessor">#define<sp/>_PICOTEST_FAILURE(type,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="635"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>picoTest_fail++;<sp/>\</highlight></codeline>
<codeline lineno="636"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>picoTest_assertFailed(PICOTEST_FAILURE_LOGGER,<sp/>__FILE__,<sp/>__LINE__,<sp/>\</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/>_PICOTEST_ARGCOUNT(__VA_ARGS__),<sp/>__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor">static<sp/>int<sp/>picoTest_fail<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>jmp_buf<sp/>*picoTest_failureEnv<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="group__assertions_1ga62031fa5f6f86e517565b77a1fa37f59" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_ABORT()<sp/>\</highlight></codeline>
<codeline lineno="663"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>longjmp(*picoTest_failureEnv,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_assertFailed(<ref refid="group__public__interface_1ga407922fa95d91c28651b93fbafe1d1bb" kindref="member">PicoTestFailureLoggerProc</ref><sp/>*proc,<sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Extra<sp/>args<sp/>after<sp/>**test**<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(args,<sp/>test);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/>va_arg(args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc(file,<sp/>line,<sp/>type,<sp/>test,<sp/>msg,<sp/>args);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc(file,<sp/>line,<sp/>type,<sp/>test,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="group__assertions_1ga2011048ceed2457e95498573d0730eaf" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__assertions_1ga2011048ceed2457e95498573d0730eaf" kindref="member">PicoTestAssertBeforeProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_beforeAssert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test)<sp/>{}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="group__assertions_1gaa38b1a0014fe2ab172a5466f9031aafb" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_ASSERT_BEFORE<sp/>picoTest_beforeAssert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="group__assertions_1ga9502bbfe9927766f12e8de83aa37b706" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__assertions_1ga9502bbfe9927766f12e8de83aa37b706" kindref="member">PicoTestAssertAfterProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test,<sp/></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_afterAssert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*test,<sp/></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="803" refid="group__assertions_1gae6c0c62e54611c6d92a3a8b81545f934" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_ASSERT_AFTER<sp/>picoTest_afterAssert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="843" refid="group__fixtures_1ga983cffc937dca4baa55f59afad404f03" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_CONTEXT(_fixtureName)<sp/>\</highlight></codeline>
<codeline lineno="844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>_fixtureName##_Context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="preprocessor">#if<sp/>defined(_PICOTEST_PARENS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>PICOTEST_FIXTURE_SETUP(...)<sp/>\</highlight></codeline>
<codeline lineno="876"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_CONCATENATE(_PICOTEST_FIXTURE_SETUP_,_PICOTEST_ARGCOUNT(__VA_ARGS__))<sp/>_PICOTEST_PARENS(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878" refid="group__fixtures_1ga1e98cba23391e13521100528ee1a2181" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>PICOTEST_FIXTURE_SETUP(...)<sp/>\</highlight></codeline>
<codeline lineno="879"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_CONCATENATE(_PICOTEST_FIXTURE_SETUP_,_PICOTEST_ARGCOUNT(__VA_ARGS__))(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(_PICOTEST_PARENS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor">#define<sp/>_PICOTEST_FIXTURE_SETUP_1(_fixtureName)<sp/>\</highlight></codeline>
<codeline lineno="884"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_fixtureName##_setup(void<sp/>*<sp/>_fixtureName##_DUMMY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_FIXTURE_SETUP_2(_fixtureName,<sp/>_context)<sp/>\</highlight></codeline>
<codeline lineno="887"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_fixtureName##_setup(struct<sp/>_fixtureName##_Context<sp/>*<sp/>_context)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_FIXTURE_CALL_SETUP(_fixtureName,<sp/>_testName,<sp/>context)<sp/>\</highlight></codeline>
<codeline lineno="890"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PICOTEST_FIXTURE_BEFORE_SETUP(_PICOTEST_STRINGIZE(_fixtureName),<sp/>_PICOTEST_STRINGIZE(_testName));<sp/>\</highlight></codeline>
<codeline lineno="891"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_fixtureName##_setup(context);<sp/>\</highlight></codeline>
<codeline lineno="892"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PICOTEST_FIXTURE_AFTER_SETUP(_PICOTEST_STRINGIZE(_fixtureName),<sp/>_PICOTEST_STRINGIZE(_testName));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="preprocessor">#if<sp/>defined(_PICOTEST_PARENS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>PICOTEST_FIXTURE_TEARDOWN(...)<sp/>\</highlight></codeline>
<codeline lineno="925"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_CONCATENATE(_PICOTEST_FIXTURE_TEARDOWN_,_PICOTEST_ARGCOUNT(__VA_ARGS__))<sp/>_PICOTEST_PARENS(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927" refid="group__fixtures_1ga0d887bdb08e22489fc3cf9fb28a35fd1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>PICOTEST_FIXTURE_TEARDOWN(...)<sp/>\</highlight></codeline>
<codeline lineno="928"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_CONCATENATE(_PICOTEST_FIXTURE_TEARDOWN_,_PICOTEST_ARGCOUNT(__VA_ARGS__))(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(_PICOTEST_PARENS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="preprocessor">#define<sp/>_PICOTEST_FIXTURE_TEARDOWN_1(_fixtureName)<sp/>\</highlight></codeline>
<codeline lineno="933"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_fixtureName##_teardown(int<sp/>PICOTEST_FAIL,<sp/>\</highlight></codeline>
<codeline lineno="934"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*<sp/>_fixtureName##_DUMMY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_FIXTURE_TEARDOWN_2(_fixtureName,<sp/>_context)<sp/>\</highlight></codeline>
<codeline lineno="937"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>_fixtureName##_teardown(int<sp/>PICOTEST_FAIL,<sp/>\</highlight></codeline>
<codeline lineno="938"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>_fixtureName##_Context<sp/>*<sp/>_context)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_FIXTURE_CALL_TEARDOWN(_fixtureName,<sp/>_testName,<sp/>context,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="941"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PICOTEST_FIXTURE_BEFORE_TEARDOWN(_PICOTEST_STRINGIZE(_fixtureName),<sp/>_PICOTEST_STRINGIZE(_testName),<sp/>fail);<sp/>\</highlight></codeline>
<codeline lineno="942"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_fixtureName##_teardown(fail,<sp/>context);<sp/>\</highlight></codeline>
<codeline lineno="943"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PICOTEST_FIXTURE_AFTER_TEARDOWN(_PICOTEST_STRINGIZE(_fixtureName),<sp/>_PICOTEST_STRINGIZE(_testName),<sp/>fail);<sp/>\</highlight></codeline>
<codeline lineno="944"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="973" refid="group__fixtures_1ga78ede622d468ebbe0bcc47698146ead9" refkind="member"><highlight class="preprocessor">typedef<sp/>void<sp/>(PicoTestFixtureBeforeSetupProc)(const<sp/>char<sp/>*fixtureName,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_beforeSetup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004" refid="group__fixtures_1gab6053367243af2ee7745bf35a3baaa4e" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_BEFORE_SETUP<sp/>picoTest_beforeSetup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022" refid="group__fixtures_1gae75749e42f2c93cfedae9220ad149e00" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__fixtures_1gae75749e42f2c93cfedae9220ad149e00" kindref="member">PicoTestFixtureAfterSetupProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_afterSetup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053" refid="group__fixtures_1ga679063021accc32a74c1e617ed68423f" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_AFTER_SETUP<sp/>picoTest_afterSetup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072" refid="group__fixtures_1ga154395391c0e95f5b08acaf38d2ef296" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__fixtures_1ga154395391c0e95f5b08acaf38d2ef296" kindref="member">PicoTestFixtureBeforeTeardownProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_beforeTeardown(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103" refid="group__fixtures_1gaf68cbda0bf19afd7994c2e0a15278f8d" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_BEFORE_TEARDOWN<sp/>picoTest_beforeTeardown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122" refid="group__fixtures_1gad1e2073b337cd5697af642ce44c98db4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__fixtures_1gad1e2073b337cd5697af642ce44c98db4" kindref="member">PicoTestFixtureAfterTeardownProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_afterTeardown(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fixtureName,</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153" refid="group__fixtures_1ga1a910236e326a942bc3a5be5c6013520" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_FIXTURE_AFTER_TEARDOWN<sp/>picoTest_afterTeardown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195" refid="group__test__suites_1ga7a9c873e5e377bd88fcc4849689c1e6f" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE(_suiteName,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_FOR_EACH(_PICOTEST_SUITE_DECLARE_TEST,__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="1197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>PicoTestDescr<sp/>_suiteName##_tests[]<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_FOR_EACH(_PICOTEST_SUITE_DECLARE_TEST_CASE,__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="1199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{NULL,<sp/>NULL,<sp/>NULL}};<sp/>\</highlight></codeline>
<codeline lineno="1200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>_suiteName##_traverse(PicoTestTraverseProc<sp/>*proc)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>nb=sizeof(_suiteName##_tests)/sizeof(*_suiteName##_tests)-1;<sp/>\</highlight></codeline>
<codeline lineno="1202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PicoTestDescr<sp/>*<sp/>test=_suiteName##_tests;<sp/>\</highlight></codeline>
<codeline lineno="1203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc(_PICOTEST_STRINGIZE(_suiteName),<sp/>nb);<sp/>\</highlight></codeline>
<codeline lineno="1204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>test-&gt;name;<sp/>test++)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test-&gt;traverse(proc);<sp/>\</highlight></codeline>
<codeline lineno="1206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>_suiteName##_testCaseRunner(const<sp/>char<sp/>*cond)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>nb=sizeof(_suiteName##_tests)/sizeof(*_suiteName##_tests)-1;<sp/>\</highlight></codeline>
<codeline lineno="1210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PicoTestDescr<sp/>*<sp/>test=_suiteName##_tests;<sp/>\</highlight></codeline>
<codeline lineno="1211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>fail=0;<sp/>\</highlight></codeline>
<codeline lineno="1212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PICOTEST_SUITE_ENTER(_PICOTEST_STRINGIZE(_suiteName),<sp/>nb);<sp/>\</highlight></codeline>
<codeline lineno="1213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>test-&gt;name;<sp/>test++)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>index=(int)<sp/>(test<sp/>-<sp/>_suiteName##_tests);<sp/>\</highlight></codeline>
<codeline lineno="1215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>sfail=0;<sp/>\</highlight></codeline>
<codeline lineno="1216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PICOTEST_SUITE_BEFORE_SUBTEST(_PICOTEST_STRINGIZE(_suiteName),<sp/>nb,<sp/>\</highlight></codeline>
<codeline lineno="1217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail,<sp/>index,<sp/>test-&gt;name);<sp/>\</highlight></codeline>
<codeline lineno="1218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sfail<sp/>=<sp/>test-&gt;test(cond);<sp/>\</highlight></codeline>
<codeline lineno="1219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail<sp/>+=<sp/>sfail;<sp/>\</highlight></codeline>
<codeline lineno="1220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PICOTEST_SUITE_AFTER_SUBTEST(_PICOTEST_STRINGIZE(_suiteName),<sp/>nb,<sp/>\</highlight></codeline>
<codeline lineno="1221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail,<sp/>index,<sp/>test-&gt;name,<sp/>sfail);<sp/>\</highlight></codeline>
<codeline lineno="1222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PICOTEST_SUITE_LEAVE(_PICOTEST_STRINGIZE(_suiteName),<sp/>nb,<sp/>fail);<sp/>\</highlight></codeline>
<codeline lineno="1224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fail;<sp/>\</highlight></codeline>
<codeline lineno="1225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>_suiteName(const<sp/>char<sp/>*cond)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>fail=0;<sp/>\</highlight></codeline>
<codeline lineno="1228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PicoTestFilterResult<sp/>filterResult<sp/>=<sp/>(cond<sp/>==<sp/>NULL)<sp/>\</highlight></codeline>
<codeline lineno="1229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>PICOTEST_FILTER_PASS<sp/>\</highlight></codeline>
<codeline lineno="1230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>PICOTEST_FILTER(_suiteName,<sp/>_PICOTEST_STRINGIZE(_suiteName),<sp/>cond);<sp/>\</highlight></codeline>
<codeline lineno="1231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(filterResult)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PICOTEST_FILTER_PASS:<sp/>\</highlight></codeline>
<codeline lineno="1233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cond<sp/>=<sp/>NULL;<sp/>\</highlight></codeline>
<codeline lineno="1234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PICOTEST_FILTER_PASS_PROPAGATE:<sp/>\</highlight></codeline>
<codeline lineno="1235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail<sp/>+=<sp/>_suiteName##_testCaseRunner(cond);<sp/>\</highlight></codeline>
<codeline lineno="1236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="1237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PICOTEST_FILTER_SKIP:<sp/>\</highlight></codeline>
<codeline lineno="1238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="1239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PICOTEST_FILTER_SKIP_PROPAGATE:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PicoTestDescr<sp/>*<sp/>test=_suiteName##_tests;<sp/>\</highlight></codeline>
<codeline lineno="1241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>test-&gt;name;<sp/>test++)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail<sp/>+=<sp/>test-&gt;test(cond);<sp/>\</highlight></codeline>
<codeline lineno="1243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="1246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fail;<sp/>\</highlight></codeline>
<codeline lineno="1248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="preprocessor">#define<sp/>_PICOTEST_SUITE_DECLARE_TEST_CASE(_testName)<sp/>\</highlight></codeline>
<codeline lineno="1252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{_PICOTEST_STRINGIZE(_testName),<sp/>_testName,<sp/>_testName##_traverse},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_SUITE_DECLARE_TEST(_testName)<sp/>\</highlight></codeline>
<codeline lineno="1254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>_testName(const<sp/>char<sp/>*);<sp/>\</highlight></codeline>
<codeline lineno="1255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>_testName##_traverse(PicoTestTraverseProc<sp/>*);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PicoTestDescr<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__public__interface_1ga824e8707dfbd1726aa15beb5f27b957a" kindref="member">PicoTestProc</ref><sp/>*test;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*traverse)(<ref refid="group__public__interface_1ga0b6b1fbb66a2062b823d28026399d27b" kindref="member">PicoTestTraverseProc</ref><sp/>*);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}<sp/>PicoTestDescr;</highlight></codeline>
<codeline lineno="1293" refid="group__test__suites_1ga881ee23cced7bc4df9427409dcb55254" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__test__suites_1ga881ee23cced7bc4df9427409dcb55254" kindref="member">PicoTestSuiteEnterProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_enterTestSuite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb)<sp/>{}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322" refid="group__test__suites_1gae569b3a4f05ebefc297411072e505fd3" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_ENTER<sp/>picoTest_enterTestSuite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340" refid="group__test__suites_1gabc6f39019f0cde9f04812785aceaab09" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__test__suites_1gabc6f39019f0cde9f04812785aceaab09" kindref="member">PicoTestSuiteLeaveProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_leaveTestSuite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail)<sp/>{}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371" refid="group__test__suites_1ga2ce5e2f78882e9f26067dc4ca9d0570c" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_LEAVE<sp/>picoTest_leaveTestSuite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393" refid="group__test__suites_1gade4d2a7d8a611ca76c675607529a3edb" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__test__suites_1gade4d2a7d8a611ca76c675607529a3edb" kindref="member">PicoTestSuiteBeforeSubtestProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_beforeSubtest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail,<sp/></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName)<sp/>{}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424" refid="group__test__suites_1ga5a49439f633f383f0bb3d2a6e700d464" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_BEFORE_SUBTEST<sp/>picoTest_beforeSubtest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448" refid="group__test__suites_1ga80efec0204108859c9ececa3921f6f76" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="group__test__suites_1ga80efec0204108859c9ececa3921f6f76" kindref="member">PicoTestSuiteAfterSubtestProc</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfail);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>picoTest_afterSubtest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*suiteName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail,</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*testName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfail)<sp/>{}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479" refid="group__test__suites_1gaab4493d86071cc9263827bf9a05a3b24" refkind="member"><highlight class="preprocessor">#define<sp/>PICOTEST_SUITE_AFTER_SUBTEST<sp/>picoTest_afterSubtest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="preprocessor">#define<sp/>_PICOTEST_STRINGIZE(arg)<sp/>\</highlight></codeline>
<codeline lineno="1504"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#arg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="preprocessor">#define<sp/>_PICOTEST_CONCATENATE(arg1,<sp/>arg2)<sp/>\</highlight></codeline>
<codeline lineno="1510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CONCATENATE1(arg1,<sp/>arg2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="preprocessor">#define<sp/>_PICOTEST_CONCATENATE1(arg1,<sp/>arg2)<sp/>\</highlight></codeline>
<codeline lineno="1514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PICOTEST_CONCATENATE2(arg1,<sp/>arg2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PICOTEST_CONCATENATE2(arg1,<sp/>arg2)<sp/>\</highlight></codeline>
<codeline lineno="1516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>arg1##arg2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="preprocessor">#if<sp/>defined(_PICOTEST_PARENS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_ARGCOUNT(...)<sp/>\</highlight></codeline>
<codeline lineno="1541"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_LASTARG<sp/>_PICOTEST_PARENS(<sp/>\</highlight></codeline>
<codeline lineno="1542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="1543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>63,62,61,60,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>59,58,57,56,55,54,53,52,51,50,<sp/>\</highlight></codeline>
<codeline lineno="1545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>49,48,47,46,45,44,43,42,41,40,<sp/>\</highlight></codeline>
<codeline lineno="1546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>39,38,37,36,35,34,33,32,31,30,<sp/>\</highlight></codeline>
<codeline lineno="1547"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>29,28,27,26,25,24,23,22,21,20,<sp/>\</highlight></codeline>
<codeline lineno="1548"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19,18,17,16,15,14,13,12,11,10,<sp/>\</highlight></codeline>
<codeline lineno="1549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9,8,7,6,5,4,3,2,1,0<sp/>\</highlight></codeline>
<codeline lineno="1550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_ARGCOUNT(...)<sp/>\</highlight></codeline>
<codeline lineno="1553"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PICOTEST_LASTARG(<sp/>\</highlight></codeline>
<codeline lineno="1554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__,<sp/>\</highlight></codeline>
<codeline lineno="1555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>63,62,61,60,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>59,58,57,56,55,54,53,52,51,50,<sp/>\</highlight></codeline>
<codeline lineno="1557"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>49,48,47,46,45,44,43,42,41,40,<sp/>\</highlight></codeline>
<codeline lineno="1558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>39,38,37,36,35,34,33,32,31,30,<sp/>\</highlight></codeline>
<codeline lineno="1559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>29,28,27,26,25,24,23,22,21,20,<sp/>\</highlight></codeline>
<codeline lineno="1560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19,18,17,16,15,14,13,12,11,10,<sp/>\</highlight></codeline>
<codeline lineno="1561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9,8,7,6,5,4,3,2,1,0<sp/>\</highlight></codeline>
<codeline lineno="1562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(_PICOTEST_PARENS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="preprocessor">#define<sp/>_PICOTEST_LASTARG(<sp/>\</highlight></codeline>
<codeline lineno="1567"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7,<sp/>_8,<sp/>_9,_10,<sp/>\</highlight></codeline>
<codeline lineno="1568"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,<sp/>\</highlight></codeline>
<codeline lineno="1569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,<sp/>\</highlight></codeline>
<codeline lineno="1570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,<sp/>\</highlight></codeline>
<codeline lineno="1571"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,<sp/>\</highlight></codeline>
<codeline lineno="1572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,<sp/>\</highlight></codeline>
<codeline lineno="1573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_61,_62,_63,<sp/>\</highlight></codeline>
<codeline lineno="1574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>N,...)<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="preprocessor">#if<sp/>defined(_PICOTEST_PARENS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH(what,<sp/>...)<sp/>_PICOTEST_CONCATENATE(_PICOTEST_FOR_EACH_,_PICOTEST_ARGCOUNT(__VA_ARGS__))<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH(what,<sp/>...)<sp/>_PICOTEST_CONCATENATE(_PICOTEST_FOR_EACH_,_PICOTEST_ARGCOUNT(__VA_ARGS__))(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(_PICOTEST_PARENS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="preprocessor">#if<sp/>defined(_PICOTEST_PARENS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_1(what,<sp/>x)<sp/>what(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_2(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_1<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_3(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_2<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_4(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_3<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_5(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_4<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_6(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_5<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_7(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_6<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_8(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_7<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_9(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_8<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_10(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_9<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_11(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_10<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_12(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_11<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_13(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_12<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_14(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_13<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_15(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_14<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_16(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_15<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_17(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_16<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_18(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_17<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_19(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_18<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_20(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_19<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_21(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_20<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_22(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_21<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_23(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_22<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_24(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_23<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_25(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_24<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_26(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_25<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_27(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_26<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_28(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_27<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_29(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_28<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_30(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_29<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_31(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_30<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_32(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_31<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_33(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_32<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_34(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_33<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_35(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_34<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_36(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_35<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_37(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_36<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_38(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_37<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_39(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_38<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_40(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_39<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_41(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_40<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_42(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_41<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_43(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_42<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_44(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_43<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_45(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_44<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_46(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_45<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_47(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_46<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_48(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_47<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_49(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_48<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_50(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_49<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_51(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_50<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_52(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_51<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_53(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_52<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_54(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_53<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_55(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_54<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_56(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_55<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_57(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_56<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_58(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_57<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_59(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_58<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_60(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_59<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_61(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_60<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_62(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_61<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_63(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_62<sp/>_PICOTEST_PARENS(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_1(what,<sp/>x)<sp/>what(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_2(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_1(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_3(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_2(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_4(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_3(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_5(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_4(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_6(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_5(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_7(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_6(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_8(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_7(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_9(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_8(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_10(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_9(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_11(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_10(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_12(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_11(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_13(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_12(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_14(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_13(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_15(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_14(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_16(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_15(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_17(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_16(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_18(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_17(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_19(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_18(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_20(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_19(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_21(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_20(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_22(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_21(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_23(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_22(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_24(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_23(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_25(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_24(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_26(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_25(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_27(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_26(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_28(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_27(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_29(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_28(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_30(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_29(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_31(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_30(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_32(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_31(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_33(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_32(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_34(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_33(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_35(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_34(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_36(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_35(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_37(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_36(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_38(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_37(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_39(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_38(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_40(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_39(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_41(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_40(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_42(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_41(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_43(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_42(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_44(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_43(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_45(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_44(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_46(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_45(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_47(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_46(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_48(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_47(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_49(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_48(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_50(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_49(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_51(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_50(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_52(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_51(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_53(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_52(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_54(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_53(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_55(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_54(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_56(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_55(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_57(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_56(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_58(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_57(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_59(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_58(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_60(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_59(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_61(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_60(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_62(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_61(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_PICOTEST_FOR_EACH_63(what,<sp/>x,<sp/>...)<sp/>what(x)<sp/>_PICOTEST_FOR_EACH_62(what,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(_PICOTEST_PARENS)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_PICOTEST<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/picotest.h"/>
  </compounddef>
</doxygen>
